/*
 ============================================================================
 Description : The basic date information includes month, date, century, and
year.
* To hide the information we developed a encryption system which
encrypts date info into one single integer.
* In the system, the original date info is represented by four int numbers:
month, date, century, and year.
* The encrypted secret is one int number and each byte of the secret
stores month, date, century, and year, respectively, from left to right.
* For example, 10/8/2018 will be encrypted as 0X0A081412 (00001010
00001000 00010100 00010010 in binary). The workflow has been provided.
============================================================================
Your job is to complete the missing code in the encrypt and decrypt methods:
        >>encrypt month, date, century, and year into secret
        >>decrypt secret to find out month, date, century, and year
============================================================================
Things to beware of
 1. Bitwise OR, AND, and shifting
 2. Integer in different numbering system
 3. Binary representation
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>

void clearBuffer();
void encrypt();
void decrypt();
void printBinary(int number);
void printOption();
void printArray(int arr[], int size);

static int month = 0;
static int date = 0;
static int century = 0;
static int year = 0;
static int secret = 0;

int main(void) {
  char userChoice = ' ';
  int isQuit = 0;
  while (1 == 1) { // Loop, for user choice: encryption / decryption
    printOption();
    userChoice = getchar();
    // get rid of the rest characters in the buffer
    clearBuffer();

    // response to user choice
    switch (userChoice) {
    case '1':
      encrypt();
      break;
    case '2':
      decrypt();
      break;
    case 'q':
      isQuit = 1;
      break;
    default:
      break;
    }
    // quit
    if (isQuit == 1) {
      puts("Bye");
      break; // break out the infinite while loop
    }

    // print final result
    printf("Date: %d-%d-%d%d, Secret: %#X, ", month, date, century, year,
           secret);
    printBinary(secret);
    // get rid of remaining characters in the buffer left by encrypt or decrypt
    clearBuffer();
  }
  return EXIT_SUCCESS;
}
void clearBuffer() {
  char garbage = ' ';
  while (garbage != '\n') {
    garbage = getchar();
  }
}
/** encrypt(): Encrypt user entered date information into secret (i.e., one
 * single integer)
 * */
void encrypt() {
  puts("*********Encrypting a date!*************");
  // Ask user for month, date, and year (4-digit year)
  puts("Enter month number:");
  scanf("%d", &month); // month is already a pointer / address
  puts("Enter date number:");
  scanf("%d", &date);
  puts("Enter 4-digit year number:");
  scanf("%d", &year);

  // calculate century and 2-digit year
  century = year / 100;
  year = year % 100;

  /**************************Your job below *****************************/
  // Encrypt month, date, century, and year into secret
  // shifting occurs because we need it to be together
  month = month << 24;
  date = date << 16;
  century = century << 8;
  // year: no need to shift

  // putting it all in the secret since 'or' (|) is addition
  secret |= month;
  secret |= date;
  secret |= century;
  secret |= year;
}
void decrypt() {
  puts("*********Decrypting a secret*********");
  puts("Enter a secret number in hexadecimal form:");
  scanf("%X", &secret); // Test with 0X0A081412

  /**************************Your job below *****************************/
  // Decryption: figure out the month, date, century, and year from the secret
  int mask = 0XFF;

  year = secret & mask;
  century = (secret >> 8) & mask;
  date = (secret >> 16) & mask;
  month = (secret >> 24) & mask;
}
void printBinary(int number) {
  int size = 8 * sizeof(int);
  int arr[size];

  // get binary into the array
  int i = size - 1;
  while (i >= 0) {
    arr[i] = number & 01;
    number = number >> 1; // right-shift 1 bit
    i--;                  // decrement index
  }
  printArray(arr, size);
}

void printOption() {
  puts("Enter your choice: \n"
       "\t1-Encrypt a Date; \n"
       "\t2-Decrypt a Date; \n"
       "\tq-Quit");
}
void printArray(int arr[], int size) {
  int i = 0;
  for (; i < size; i++) {
    printf("%d", arr[i]);
  }
  puts("");
}
